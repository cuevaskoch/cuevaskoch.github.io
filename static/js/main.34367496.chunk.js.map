{"version":3,"sources":["store/index.js","config.js","api/index.js","api/signin.js","store/setup/index.js","store/signin.js","selectors/signin.js","components/TextInput/index.js","components/SignInForm/SignInForm.js","components/SignInForm/index.js","components/Confirmation/InGoodStanding.js","components/Confirmation/NotInGoodStanding.js","components/Confirmation/Pending.js","components/Confirmation/Confirmation.js","components/Confirmation/index.js","components/App/App.js","components/App/index.js","components/SetupForm/SetupForm.js","components/SetupForm/index.js","components/RouterContainer/RouterContainer.js","components/RouterContainer/index.js","registerServiceWorker.js","index.js"],"names":["history","ROOT_URL","api","getSignInResult","formValues","meetingSheetId","normalizedEmail","emailAddress","trim","toLowerCase","postParams","Object","objectSpread","body","JSON","stringify","url","URL","concat","config","fetch","headers","Accept","Content-Type","mode","method","then","response","json","initializeSheet","defaultState","Immutable","Map","undefined","reducer","state","arguments","length","action","type","merge","payload","setStatus","emptyState","signingInState","isPending","initialState","basename","document","getElementsByTagName","getAttribute","createBrowserHistory","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","combineReducers","setup","signin","router","connectRouter","applyMiddleware","routerMiddleware","thunkMiddleware","$hasSignedIn","getIn","$isInGoodStandingPending","$isInGoodStanding","$expirationDate","requiredValidator","value","withFormState","_ref","field","formState","label","validate","errorText","errors","hasError","cssClass","react_default","a","createElement","className","htmlFor","informed_dist","autoComplete","id","validateOnBlur","SignInForm","onSubmit","name","style","display","components_TextInput","connect","dispatch","ownProps","hasSignedIn","isInGoodStandingPending","result","isInGoodStanding","onList","expirationDate","logSignIn","inGoodStanding","Fragment","href","target","rel","NotInGoodStanding","Pending","Confirmation","onReset","InGoodStanding","onClick","getControl","defaultProps","isMemberInGoodStanding","mapDispatchToProps","App","components_Confirmation","components_SignInForm","match","params","SetupForm","push","RouterContainer","immutable","Route","exact","path","component","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","rootElement","getElementById","ReactDOM","render","es","store","components_RouterContainer","process","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.34367496.chunk.js","sourcesContent":["import Immutable from 'immutable';\nimport { createBrowserHistory } from 'history';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { connectRouter, routerMiddleware } from 'connected-react-router/immutable';\nimport thunkMiddleware from 'redux-thunk';\nimport { combineReducers } from 'redux-immutable';\n\nimport setup from './setup';\nimport signin from './signin';\n\nconst initialState = new Immutable.Map();\nconst rootReducer = history => combineReducers({\n  setup,\n  signin,\n  router: connectRouter(history)\n});\n\nconst basename = document.getElementsByTagName('base')[0].getAttribute('href');\nexport const history = createBrowserHistory({ basename });\n\n// eslint-disable-next-line no-underscore-dangle\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default createStore(rootReducer(history),\n  initialState,\n  composeEnhancers(\n    applyMiddleware(\n      routerMiddleware(history),\n      thunkMiddleware,\n    ),\n  )\n);\n","export const ROOT_URL = 'https://zezjjanshg.execute-api.us-west-2.amazonaws.com/dev/';\n","import signin from './signin';\n\nexport default {\n  signin,\n};\n","import * as config from '../config';\n// import * as config from '../config.local';\n\nconst normalize = str => (str || '').trim().toLowerCase();\nconst getSignInResult = (formValues, meetingSheetId) => {\n  const normalizedEmail = normalize(formValues.emailAddress);\n  const postParams = {\n    ...formValues,\n    meetingSheetId,\n    emailAddress: normalizedEmail,\n  };\n  const body = JSON.stringify(postParams);\n\n  const url = new URL(`${config.ROOT_URL}/signin`);\n  return fetch(url, {\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    mode: 'cors',\n    method: 'POST',\n    body,\n  }).then(response => response.json());\n};\n\nconst initializeSheet = meetingSheetId => {\n  const url = new URL(`${config.ROOT_URL}/initialize/${meetingSheetId}`);\n  return fetch(url, {\n    method: 'PUT',\n  }).then(response => response.json());\n}\n\nexport default {\n  getSignInResult,\n  initializeSheet,\n};\n","import Immutable from 'immutable';\nimport { history } from '../index';\nimport api from '../../api';\n\nconst SET_MEETING_SHEET_ID = 'setup/setMeetingSheetId';\nexport const setMeetingSheetId = formValues => dispatch => {\n  const { meetingSheetId } = formValues;\n  api.signin.initializeSheet(meetingSheetId)\n    .then(() => {\n      history.push(`/meeting/${meetingSheetId}`);\n      dispatch({\n        type: SET_MEETING_SHEET_ID,\n        payload: formValues,\n      });\n    });\n};\n\nconst defaultState = new Immutable.Map({\n  meetingSheetId: undefined,\n})\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case SET_MEETING_SHEET_ID:\n      return state.merge(action.payload);\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import Immutable from 'immutable';\nimport api from '../api';\n\nconst CLEAR = 'signin/clear';\nconst REQUEST = 'signin/request';\nconst STATUS = 'signin/status';\n\nconst setStatus = (payload) => ({ type: STATUS, payload });\nexport const clearSignIn = () => ({ type: CLEAR });\n\nexport const logSignIn = (formValues, meetingSheetId) => dispatch => {\n  dispatch({ type: REQUEST });\n  dispatch(setStatus({\n    hasSignedIn: true,\n    isInGoodStandingPending: true,\n  }));\n  api.signin.getSignInResult(formValues, meetingSheetId)\n    .then((result) => {\n      dispatch(setStatus({\n        isInGoodStandingPending: false,\n        isInGoodStanding: result.onList && result.isInGoodStanding,\n        expirationDate: result.expirationDate,\n      }));\n    });\n};\n\nconst emptyState = new Immutable.Map();\nconst signingInState = new Immutable.Map({\n  isPending: true,\n});\nconst reducer = (state = emptyState, action) => {\n  switch (action.type) {\n    case STATUS:\n      return state.merge(action.payload);\n    case REQUEST:\n      return signingInState;\n    case CLEAR:\n      return emptyState;\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","export const $hasSignedIn = state =>\n  state.getIn(['signin', 'hasSignedIn'], false);\n\nexport const $isInGoodStandingPending = state =>\n  state.getIn(['signin', 'isInGoodStandingPending'], false);\n\nexport const $isInGoodStanding = state =>\n  state.getIn(['signin', 'isInGoodStanding'], false);\n\nexport const $expirationDate = state =>\n  state.getIn(['signin', 'expirationDate'], 'N/A');\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, withFormState } from 'informed';\n\nexport const requiredValidator = value => value ? null : 'Required.';\n\nconst TextInput = ({ field, formState, label, validate }) => {\n  const { errors } = formState;\n  const errorText = errors[field];\n  const hasError = typeof errorText !== 'undefined';\n\n  let cssClass = 'form-control form-control-lg';\n  if (hasError) cssClass += ' is-invalid';\n\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={field}>{label}</label>\n      <Text\n        className={cssClass}\n        autoComplete=\"off\"\n        field={field}\n        id={field}\n        validate={validate}\n        validateOnBlur\n      />\n      {hasError\n        ? <div className=\"invalid-feedback\">{errorText}</div>\n        : null\n      }\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  field: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  validate: PropTypes.func,\n};\n\nexport default withFormState(TextInput);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'informed';\nimport TextInput, { requiredValidator } from '../TextInput';\n\n\nconst SignInForm = ({ onSubmit }) => (\n  <div className=\"container\">\n    <Form id=\"signin-form\" onSubmit={onSubmit}>\n      <input autoComplete=\"false\" name=\"hidden\" type=\"text\" style={{ display: 'none' }} />\n      <TextInput\n        field=\"firstName\"\n        label=\"First Name\"\n        validate={requiredValidator}\n      />\n      <TextInput\n        field=\"lastName\"\n        label=\"Last Name\"\n        validate={requiredValidator}\n      />\n      <TextInput\n        field=\"emailAddress\"\n        label=\"Email Address\"\n        validate={requiredValidator}\n      />\n      <TextInput\n        field=\"phoneNumber\"\n        label=\"Phone Number\"\n        validate={requiredValidator}\n      />\n      <div className=\"btn-group\">\n        <button className=\"btn btn-primary\" type=\"submit\">Submit</button>\n      </div>\n      <div className=\"btn-group\">\n        <button className=\"btn btn-light\" type=\"reset\">Reset</button>\n      </div>\n    </Form>\n  </div>\n);\n\nSignInForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default SignInForm;\n","import { connect } from 'react-redux';\nimport { logSignIn } from '../../store/signin';\n\nimport SignInForm from './SignInForm';\n\nconst mapStateToProps = () => ({});\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  onSubmit: (formValues) => {\n    dispatch(logSignIn(formValues, ownProps.meetingSheetId));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignInForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst inGoodStanding = ({ expirationDate }) => (\n  <React.Fragment>\n    <h2>You're a member in good standing! Way to go!</h2>\n    {\n      expirationDate\n        ? <p>Your membership expires on <strong>{expirationDate}</strong>.</p>\n        : ''\n    }\n    <p>Will you consider signing up for local dues? $10 a month goes a long way.</p>\n    <p><a href=\"https://www.dsa-la.org/membership\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.dsa-la.org/membership</a></p>\n  </React.Fragment>\n);\ninGoodStanding.propTypes = {\n  expirationDate: PropTypes.string,\n}\n\nexport default inGoodStanding;\n","import React from 'react';\n\nexport default () => (\n  <React.Fragment>\n    <h2>You don't appear in our records!</h2>\n    <p>Would you like to sign up to become a member?</p>\n    <p><a href=\"https://act.dsausa.org/donate/membership/\" target=\"_blank\" rel=\"noopener noreferrer\">https://act.dsausa.org/donate/membership/</a></p>\n  </React.Fragment>\n);\n","import React from 'react';\n\nexport default () => <p>Please wait while we save your sign in...</p>;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport InGoodStanding from './InGoodStanding';\nimport NotInGoodStanding from './NotInGoodStanding';\nimport Pending from './Pending';\n\nconst getControl = (isInGoodStandingPending, isInGoodStanding, expirationDate, onReset) => {\n  if (isInGoodStandingPending) return <Pending />;\n  return (\n    <React.Fragment>\n      {isInGoodStanding\n        ? <InGoodStanding expirationDate={expirationDate} />\n        : <NotInGoodStanding />\n      }\n      <button className=\"btn btn-primary\" onClick={onReset}>\n        Return to Sign In Form\n      </button>\n    </React.Fragment>\n  );\n};\n\nconst Confirmation = ({\n  isInGoodStandingPending,\n  isInGoodStanding,\n  expirationDate,\n  onReset,\n}) => (\n  <div className=\"container\">\n    {getControl(isInGoodStandingPending, isInGoodStanding, expirationDate, onReset)}\n  </div>\n);\n\nConfirmation.propTypes = {\n  isInGoodStandingPending: PropTypes.bool,\n  isInGoodStanding: PropTypes.bool,\n  expirationDate: PropTypes.string,\n  onReset: PropTypes.func.isRequired,\n};\nConfirmation.defaultProps = {\n  isMemberInGoodStanding: false,\n}\n\nexport default Confirmation;\n","import { connect } from 'react-redux';\nimport {\n  $isInGoodStandingPending,\n  $isInGoodStanding,\n  $expirationDate,\n} from '../../selectors/signin';\nimport { clearSignIn } from '../../store/signin';\nimport Confirmation from './Confirmation';\n\nconst mapStateToProps = (state) => ({\n  isInGoodStandingPending: $isInGoodStandingPending(state),\n  isInGoodStanding: $isInGoodStanding(state),\n  expirationDate: $expirationDate(state),\n});\nconst mapDispatchToProps = {\n  onReset: clearSignIn,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Confirmation);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport SignInForm from '../SignInForm';\nimport Confirmation from '../Confirmation';\n\nconst App = ({ hasSignedIn, meetingSheetId }) => {\n  if (hasSignedIn) return <Confirmation />;\n  return <SignInForm meetingSheetId={meetingSheetId} />;\n};\n\nApp.propTypes = {\n  hasSignedIn: PropTypes.bool.isRequired,\n  meetingSheetId: PropTypes.string.isRequired,\n};\n\nexport default App;\n","import { connect } from 'react-redux';\nimport { $hasSignedIn } from '../../selectors/signin';\n\nimport App from './App';\n\nconst mapStateToProps = (state, ownProps) => ({\n  hasSignedIn: $hasSignedIn(state),\n  meetingSheetId: ownProps.match.params.meetingSheetId,\n});\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'informed';\n\nimport TextInput, { requiredValidator } from '../TextInput';\n\nconst SetupForm = ({ onSubmit }) => (\n  <div className=\"container\">\n    <h2>Let's get started.</h2>\n    <p>\n      Some expository text talking about how to get the sheet ID,\n      share it to the appropriate Google account, and enter below\n      will go here.\n    </p>\n    <Form id=\"setup-form\" onSubmit={onSubmit}>\n      <input autoComplete=\"false\" name=\"hidden\" type=\"text\" style={{ display: 'none' }} />\n      <TextInput\n        field=\"meetingSheetId\"\n        label=\"Meeting Sheet ID\"\n        validate={requiredValidator}\n      />\n      <TextInput\n        field=\"meetingName\"\n        label=\"Meeting Name\"\n        validate={requiredValidator}\n      />\n      <div className=\"btn-group\">\n        <button className=\"btn btn-primary\" type=\"submit\">Go</button>\n      </div>\n    </Form>\n  </div>\n);\n\nSetupForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default SetupForm;\n\n","import { connect } from 'react-redux';\n\nimport SetupForm from './SetupForm';\nimport { setMeetingSheetId } from '../../store/setup';\n\nconst mapStateToProps = () => ({});\nconst mapDispatchToProps = {\n  onSubmit: setMeetingSheetId,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(SetupForm);\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { ConnectedRouter } from 'connected-react-router/immutable';\n\nimport App from '../App';\nimport SetupForm from '../SetupForm';\n\nconst RouterContainer = ({ history } ) => (\n  <ConnectedRouter history={history}>\n    <React.Fragment>\n      <Route exact path=\"/\" component={SetupForm} />\n      <Route path=\"/meeting/:meetingSheetId\" component={App} />\n    </React.Fragment>\n  </ConnectedRouter>\n);\n\nexport default RouterContainer;\n","import { connect } from 'react-redux';\n\nimport { history } from '../../store';\nimport RouterContainer from './RouterContainer';\n\nconst mapStateToProps = () => ({\n  history\n});\n\nexport default connect(mapStateToProps)(RouterContainer);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport default function register () {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW (swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker (swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport RouterContainer from './components/RouterContainer';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst rootElement = document.getElementById('root');\n\nReactDOM.render(\n  <Provider store={store}>\n    <RouterContainer />\n  </Provider>,\n  rootElement);\n\nregisterServiceWorker();\n"],"sourceRoot":""}